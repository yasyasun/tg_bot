import json
import random
from typing import Dict

from loguru import logger
from telebot.types import Message, InputMediaPhoto

from database.db_handlers import save_results
from loader import bot
from utils.api_request import api_request


@logger.catch
def print_hotel_info(hotel_data: Dict, amount_nights: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–µ–ª—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Å—Ç—Ä–æ–∫—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

    :param hotel_data: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ—Ç–µ–ª—é.
    :param amount_nights: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π.
    :return: —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ—Ç–µ–ª—é.
    """

    result = f"üè© –û—Ç–µ–ª—å: {hotel_data['name']}\n" \
             f"üöï –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {round(hotel_data['distance'] * 1.61, 1)} –∫–º\n" \
             f"üí≤ –¶–µ–Ω–∞ –∑–∞ 1 –Ω–æ—á—å: –æ—Ç {int(hotel_data['price'])}$\n" \
             f"üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {amount_nights} –Ω–æ—á.: {int(hotel_data['price'] * amount_nights)}$\n" \
             f"‚öìÔ∏è –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotel_data['address']}"
    return result


@logger.catch
def parse_and_print_hotels(message: Message, data_from_user: Dict) -> None:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö (–∞–¥—Ä–µ—Å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏).
    –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    :param data_from_user: –¥–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if data_from_user.get('command') == '/bestdeal':
        payload = {
            "currency": "USD",
            "eapid": 1,
            "locale": "ru_RU",
            "siteId": 300000001,
            "destination": {"regionId": data_from_user['city_id']},
            "checkInDate": {
                'day': int(data_from_user['start_day']),
                'month': int(data_from_user['start_month']),
                'year': int(data_from_user['start_year'])
            },
            "checkOutDate": {
                'day': int(data_from_user['end_day']),
                'month': int(data_from_user['end_month']),
                'year': int(data_from_user['end_year'])
            },
            "rooms": [{"adults": 2}],
            "resultsStartingIndex": 0,
            "resultsSize": 30,
            "sort": "DISTANCE",
            "filters": {"price": {
                "max": data_from_user['max_price'],
                "min": data_from_user['min_price']
            }}
        }
    else:
        payload = {
            "currency": "USD",
            "eapid": 1,
            "locale": "ru_RU",
            "siteId": 300000001,
            "destination": {"regionId": data_from_user['city_id']},
            "checkInDate": {
                'day': int(data_from_user['start_day']),
                'month': int(data_from_user['start_month']),
                'year': int(data_from_user['start_year'])
            },
            "checkOutDate": {
                'day': int(data_from_user['end_day']),
                'month': int(data_from_user['end_month']),
                'year': int(data_from_user['end_year'])
            },
            "rooms": [{"adults": 2}],
            "resultsStartingIndex": 0,
            "resultsSize": 30,
            "sort": "PRICE_LOW_TO_HIGH",
            "filters": {"availableFilter": "SHOW_AVAILABLE_ONLY"}
        }

    hotels_response = api_request(
        'POST',
        url='https://hotels4.p.rapidapi.com/properties/v2/list',
        querystring=payload
    )
    hotels = json.loads(hotels_response.text)
    hotels_data = {}
    for hotel in hotels['data']['propertySearch']['properties']:
        try:
            hotels_data[hotel['id']] = {
                'name': hotel['name'],
                'id': hotel['id'],
                'distance': hotel['destinationInfo']['distanceFromDestination']['value'],
                'price': hotel['price']['lead']['amount']
            }
        except (KeyError, TypeError):
            continue
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫ –º–µ–Ω—å—à–µ–π).
    if data_from_user['command'] == '/highprice':
        hotels_data = {
            key: value for key, value in
            sorted(hotels_data.items(), key=lambda hotel_id: hotel_id[1]['price'], reverse=True)
        }
    # –û–±–Ω—É–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ —Å–ª–æ–≤–∞—Ä—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞ —Ç–æ–ª—å–∫–æ —Ç–µ –æ—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É.
    elif data_from_user['command'] == '/bestdeal':
        hotels_data = {}
        for hotel in hotels['data']['propertySearch']["properties"]:
            if data_from_user['start_distance'] < \
                    hotel['destinationInfo']['distanceFromDestination']['value'] < \
                    data_from_user['end_distance']:
                hotels_data[hotel['id']] = {
                    'name': hotel['name'],
                    'distance': hotel['destinationInfo']['distanceFromDestination']['value'],
                    'price': hotel['price']['lead']['amount']
                }
    count = 0
    for key, hotel in hotels_data.items():
        # –ù—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ.
        # –¶–∏–∫–ª –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —á–∏—Å–ª–∞ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        if count < data_from_user['amount_hotels']:
            count += 1
            detail_payload = {
                "currency": "USD",
                "eapid": 1,
                "locale": "ru_RU",
                "siteId": 300000001,
                "propertyId": key
            }
            detail_url = 'https://hotels4.p.rapidapi.com/properties/v2/detail'
            get_details = api_request('POST', detail_url, detail_payload)
            details_hotel = json.loads(get_details.text)
            details_hotel_data = {
                'id': key,
                'name': hotels_data[key]['name'],
                'price': hotels_data[key]['price'],
                'distance': hotels_data[key]['distance'],
                'address': details_hotel['data']['propertyInfo']['summary']['location']['address']['addressLine'],
                'images': [
                    url['image']['url'] for url in details_hotel['data']['propertyInfo']['propertyGallery']['images']
                ]
            }
            amount_nights = int((data_from_user['end_date'] - data_from_user['start_date']).total_seconds() / 86400)
            hotel_info = print_hotel_info(details_hotel_data, amount_nights)
            if data_from_user['need_photo']:
                # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ç.–∫. —Ñ–æ—Ç–æ –º–Ω–æ–≥–æ, –∞ –Ω–∞–¥–æ —Ç–æ–ª—å–∫–æ 10
                try:
                    images_urls = [
                        details_hotel_data['images'][random.randint(0, len(details_hotel_data['images']) - 1)]
                        for _ in range(data_from_user['amount_photos'])
                    ]
                    details_hotel_data['images'] = images_urls
                except IndexError:
                    continue
                if images_urls:
                    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º MediaGroup —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–µ–ª—è –∏ –ø–æ—Å—ã–ª–∞–µ–º –≤ —á–∞—Ç
                    images = [
                        InputMediaPhoto(media=url, caption=hotel_info) if index == 0 else InputMediaPhoto(media=url)
                        for index, url in enumerate(images_urls)
                    ]
                    save_results(details_hotel_data, data_from_user, amount_nights)
                    bot.send_media_group(message.chat.id, images)
            else:
                # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–µ–ª–µ
                save_results(details_hotel_data, data_from_user, amount_nights)
                bot.send_message(message.chat.id, hotel_info)
        else:
            break
