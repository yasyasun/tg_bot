from loguru import logger
from telebot.types import Message
from datetime import datetime, date
from telegram_bot_calendar import DetailedTelegramCalendar

from database.db_handlers import save_user
from keyboards.inline.create_buttons import print_cities, photo_need_yes_or_no
from loader import bot
from states.user_states import UserInputState
from utils.get_cities import parse_cities
from utils.print_data import print_data_from_user


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
@logger.catch
def low_high_best_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã /lowprice, /highprice, /bestdeal
    –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–∞–∫–æ–π –∏—Å–∫–∞—Ç—å –≥–æ—Ä–æ–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    save_user(message)
    bot.delete_state(message.from_user.id, message.chat.id)  # –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–ø—Ä–æ—Å–∞ –∑–∞—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    bot.set_state(message.from_user.id, UserInputState.command, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data.clear()
        data['command'] = message.text
        data['date_time'] = datetime.now().strftime('%d-%m-%Y %H:%M:%S')
        data['user'] = message.from_user.username
    bot.set_state(message.from_user.id, UserInputState.city, message.chat.id)
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞\n\n'
                                           '‚ùó–ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º –†–æ—Å—Å–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.')


@bot.message_handler(state=UserInputState.city)
@logger.catch
def input_city(message: Message) -> None:
    """
    –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ –ø–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–æ—Ä–æ–¥–æ–≤.
    –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ—Ä–æ–¥–æ–≤ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if message.text.isalpha():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['city'] = message.text
        cities = parse_cities(message.text)
        if cities:
            bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:', reply_markup=print_cities(cities))
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–µ –Ω–∞—Ö–æ–∂—É —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤')


@bot.message_handler(state=UserInputState.amount_hotels)
@logger.catch
def input_hotels(message: Message) -> None:
    """
    –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏
    –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ–º –∏ –≤—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω–æ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 1 –¥–æ 10.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if message.text.isdigit():
        if 0 < int(message.text) <= 10:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['amount_hotels'] = int(message.text)
            bot.send_message(message.from_user.id,
                             '–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?',
                             reply_markup=photo_need_yes_or_no())
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!\n'
                                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')


@bot.message_handler(state=UserInputState.amount_photos)
@logger.catch
def input_photo(message: Message) -> None:
    """
    –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ –∏
    –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –æ—Ç 1 –¥–æ 10.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if message.text.isdigit():
        if 0 < int(message.text) <= 10:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['amount_photos'] = int(message.text)
            calendar, step = DetailedTelegramCalendar(min_date=date.today()).build()
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞', reply_markup=calendar)
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!\n'
                                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@bot.message_handler(state=UserInputState.min_price)
@logger.catch
def input_min_price(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–∂–∏–¥–∞—é—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ $.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'min_price' –∏
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if message.text.isdigit():
        if int(message.text) > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['min_price'] = float(message.text)
            bot.set_state(message.from_user.id, UserInputState.max_price, message.chat.id)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å –≤ $:")
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UserInputState.max_price)
@logger.catch
def input_max_price(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–∂–∏–¥–∞—é—â–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ $.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'max_price' –∏
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –º–∏–ª—è—Ö.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if int(message.text) > 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if int(message.text) > data['min_price']:
                data['max_price'] = float(message.text)
                bot.set_state(message.from_user.id, UserInputState.start_distance, message.chat.id)
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º "
                                                  "(–Ω–∞–ø—Ä–∏–º–µ—Ä 5.5):")
            else:
                bot.send_message(message.chat.id,
                                 f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {data['min_price']}$")
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UserInputState.start_distance)
@logger.catch
def input_start_distance(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–∂–∏–¥–∞—é—â–∞—è –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'start_distance' –∏
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –º–∏–ª—è—Ö.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if int(message.text) > 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['start_distance'] = float(message.text)
            bot.set_state(message.from_user.id, UserInputState.end_distance, message.chat.id)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º "
                                              "(–Ω–∞–ø—Ä–∏–º–µ—Ä 5.5):")
    else:
        bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')


@bot.message_handler(state=UserInputState.end_distance)
@logger.catch
def input_end_distance(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–∂–∏–¥–∞—é—â–∞—è –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'end_distance', –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏
    –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞—Ç–µ–º –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    if ',' in message.text:
        message.text = message.text.replace(',', '.')
    try:
        message.text = float(message.text)
        if message.text > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if message.text > data['start_distance']:
                    data['end_distance'] = message.text
                    data_from_user = data
                    print_data_from_user(message, data_from_user)
                    bot.set_state(message.chat.id, state=None)
                    bot.send_message(message.chat.id, f"üòâüëå –ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É!\n"
                                                      f"–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/help</b>", parse_mode="html")
                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {data['start_distance']}$"
                    )
        else:
            bot.send_message(message.from_user.id, '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è')
    except Exception:
        bot.set_state(message.chat.id, state=None)
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n")
